{"version":3,"file":"static/js/421.c783fd00.chunk.js","mappings":"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","sources":["components/minigame/Values.js","components/minigame/CreatePiecesList.js","components/minigame/RenderPiece.js","components/minigame/Restart.js","components/minigame/CheckPiece.js","components/minigame/RemovePlayablePiece.js","components/minigame/RemoveLine.js","components/minigame/UpdateGrid.js","components/minigame/GameOverModalWindow.js","components/minigame/MoveRight.js","components/minigame/MoveLeft.js","components/minigame/Rotate.js","components/minigame/Minigame.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import {useState} from 'react';\n\nfunction Values(h, w, d, r) {\n    const [getValues, setValues] = useState({\n        height: h, width: w, dificulty: d, render: r\n    });\n\n    return [getValues, (re) => {\n        setValues({height: getValues.height, width: getValues.width, dificulty: getValues.dificulty, render: re});\n    }]\n}\n\nexport default Values;","function CreatePiecesList(piecesList) {\n    /**\n     * Create a new list with the next pieces\n     * to use when the actual one is used/removed\n     * \n     * There won't be repeated pieces in the list\n     */\n    \n    /*\n     * 1: I piece\n     * 2: T piece\n     * 3: Square piece\n     * 4: L piece\n     */\n\n    let result = [];\n    let rand_piece = Math.floor(Math.random() * 4) + 1;\n    let rand = Math.floor(Math.random() * 2);\n    let last_piece = 0;\n\n    result.push(rand_piece);\n    last_piece = rand_piece;\n\n    while (result.length < 4) {\n\n        switch (rand) {\n            case 0:\n                if (last_piece === 4) {\n                    last_piece = 1;\n                }\n                else {\n                    last_piece += 1;\n                }\n                result.push(last_piece);\n                break;\n\n            case 1:\n                if (last_piece === 1) {\n                    last_piece = 4;\n                }\n                else {\n                    last_piece -= 1;\n                }\n                result.push(last_piece);\n                break;\n        }\n    }\n\n    piecesList.current = [...result];\n}\n\nexport default CreatePiecesList;","function RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece) {\n    /**\n     * If there are actual playable pieces currently\n     * active, paint it in the html grid\n     */\n\n    switch (piece_falling.current) {\n        case 0:\n            break;\n\n        case 1:\n            /* I piece */\n            switch (piece_orientation.current){\n                case 0:\n                case 2:\n                    grid_final.current[y_piece.current][x_piece.current-1] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current][x_piece.current+1] = 2;\n                    grid_final.current[y_piece.current][x_piece.current+2] = 2;\n                    break;\n\n                case 1:\n                case 3:\n                    grid_final.current[y_piece.current-1][x_piece.current] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current+1][x_piece.current] = 2;\n                    grid_final.current[y_piece.current+2][x_piece.current] = 2;\n                    break;\n            }\n            break;\n\n        case 2:\n            /* T piece */\n            switch (piece_orientation.current) {\n                case 0:\n                    grid_final.current[y_piece.current][x_piece.current-1] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current][x_piece.current+1] = 2;\n                    grid_final.current[y_piece.current+1][x_piece.current] = 2;\n                    break;\n\n                case 1:\n                    grid_final.current[y_piece.current][x_piece.current-1] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current-1][x_piece.current] = 2;\n                    grid_final.current[y_piece.current+1][x_piece.current] = 2;\n                    break;\n\n                case 2:\n                    grid_final.current[y_piece.current][x_piece.current-1] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current][x_piece.current+1] = 2;\n                    grid_final.current[y_piece.current-1][x_piece.current] = 2;\n                    break;\n\n                case 3:\n                    grid_final.current[y_piece.current][x_piece.current+1] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current-1][x_piece.current] = 2;\n                    grid_final.current[y_piece.current+1][x_piece.current] = 2;\n                    break;\n            }\n            break;\n\n        case 3:\n            /* Square piece */\n            grid_final.current[y_piece.current][x_piece.current] = 2;\n            grid_final.current[y_piece.current][x_piece.current+1] = 2;\n            grid_final.current[y_piece.current+1][x_piece.current] = 2;\n            grid_final.current[y_piece.current+1][x_piece.current+1] = 2;\n            break;\n\n        case 4:\n            /* L piece */\n            switch (piece_orientation.current) {\n                case 0:\n                    grid_final.current[y_piece.current][x_piece.current-1] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current][x_piece.current+1] = 2;\n                    grid_final.current[y_piece.current+1][x_piece.current-1] = 2;\n                    break;\n\n                case 1:\n                    grid_final.current[y_piece.current-1][x_piece.current] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current+1][x_piece.current] = 2;\n                    grid_final.current[y_piece.current-1][x_piece.current-1] = 2;\n                    break;\n\n                case 2:\n                    grid_final.current[y_piece.current][x_piece.current-1] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current][x_piece.current+1] = 2;\n                    grid_final.current[y_piece.current-1][x_piece.current+1] = 2;\n                    break;\n\n                case 3:\n                    grid_final.current[y_piece.current-1][x_piece.current] = 2;\n                    grid_final.current[y_piece.current][x_piece.current] = 2;\n                    grid_final.current[y_piece.current+1][x_piece.current] = 2;\n                    grid_final.current[y_piece.current+1][x_piece.current+1] = 2;\n                    break;\n            }\n            break;\n    }\n}\n\nexport default RenderPiece;","function Restart(started, score, highscore, piece_falling, piece_orientation, x_piece, y_piece) {\n\n    started.current = false;\n\n    if (score.current > highscore.current) {\n        highscore.current = score.current;\n    }\n    \n    score.current = 0;\n    piece_falling.current = 0;\n    piece_orientation.current = 0;\n    x_piece.current = 3;\n    y_piece.current = 0;\n}\n\nexport default Restart;","import Restart from './Restart.js';\n\nfunction CheckPiece(getValues, temp, started, piece_falling, piece_orientation, piecesList, highscore, score, x_piece, y_piece, gameOver) {\n    /**\n     * Checks and create one if there is no playable piece,\n     * or checks if the piece is able to fall, if not then\n     * it convert the piece in obstacles\n     */\n\n    /** If there is no playable piece... */\n    if (piece_falling.current === 0) {\n        let piece = piecesList.current.pop();\n\n        switch (piece) {\n            case 1:\n                /** \n                 * NN NN MM MM NN NN NN NN\n                 * NN NN MM MM NN NN NN NN\n                 * \n                 * I piece\n                 */\n                if (temp[0][2] === 0 && temp[0][3] === 0 && temp[0][4] === 0 && temp[0][5] === 0) {\n\n                    score.current += 1;\n                    piece_falling.current = piece;\n                    piece_orientation.current = 0;\n                    x_piece.current = 3;\n                    y_piece.current = 0;\n\n                }\n                else {\n                    gameOver.current = true;\n                    Restart(started, score, highscore, piece_falling, piece_orientation, x_piece, y_piece);\n                    return Array(getValues.height).fill( Array(getValues.width).fill(0) );\n                }\n                break;\n\n            case 2:\n                /**\n                 * NN NN MM MM NN NN\n                 * NN NN MM MM NN NN\n                 *       NN NN\n                 *       NN NN\n                 * \n                 * T piece\n                 */\n                if (temp[0][2] === 0 && temp[0][3] === 0 && temp[0][4] === 0 &&\n                                        temp[1][3] === 0) {\n\n                    score.current += 1;\n                    piece_falling.current = piece;\n                    piece_orientation.current = 0;\n                    x_piece.current = 3;\n                    y_piece.current = 0;\n\n                }\n                else {\n                    gameOver.current = true;\n                    Restart(started, score, highscore, piece_falling, piece_orientation, x_piece, y_piece);\n                    return Array(getValues.height).fill( Array(getValues.width).fill(0) );\n                }\n                break;\n\n            case 3:\n                /**\n                 * MM MM NN NN\n                 * MM MM NN NN\n                 * NN NN NN NN\n                 * NN NN NN NN\n                 * \n                 * Square piece\n                 */\n                if (temp[0][3] === 0 && temp[0][4] === 0 &&\n                    temp[1][3] === 0 && temp[1][4] === 0) {\n\n                    score.current += 1;\n                    piece_falling.current = piece;\n                    piece_orientation.current = 0;\n                    x_piece.current = 3;\n                    y_piece.current = 0;\n\n                }\n                else {\n                    gameOver.current = true;\n                    Restart(started, score, highscore, piece_falling, piece_orientation, x_piece, y_piece);\n                    return Array(getValues.height).fill( Array(getValues.width).fill(0) );\n                }\n                break;\n\n            case 4:\n                /**\n                 * NN NN MM MM NN NN\n                 * NN NN MM MM NN NN\n                 * NN NN\n                 * NN NN\n                 * \n                 * L piece\n                 */\n                if (temp[0][2] === 0 && temp[0][3] === 0 && temp[0][4] === 0 &&\n                    temp[1][2] === 0) {\n\n                    score.current += 1;\n                    piece_falling.current = piece;\n                    piece_orientation.current = 0;\n                    x_piece.current = 3;\n                    y_piece.current = 0;\n                }\n                else {\n                    gameOver.current = true;\n                    Restart(started, score, highscore, piece_falling, piece_orientation, x_piece, y_piece);\n                    return Array(getValues.height).fill( Array(getValues.width).fill(0) );\n                }\n                break;\n        }\n    }\n    /** If there is no more array lines below the piece... */\n    else if (y_piece.current + 1 > getValues.height - 1) {\n        switch (piece_falling.current) {\n            case 1:\n                /* I piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                    case 2:\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current][x_piece.current+2] = 1;\n                        break;\n                }\n                break;\n\n            case 2:\n                /* T piece */\n                switch (piece_orientation.current) {\n                    case 2:\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        break;\n                }\n                break;\n\n            case 4:\n                /* L piece */\n                switch (piece_orientation.current) {\n                    case 2:\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current-1][x_piece.current+1] = 1;\n                        break;\n                }\n                break;\n        }\n        piece_falling.current = 0;\n        piece_orientation.current = 0;\n        x_piece.current = 3;\n        y_piece.current = 0;\n    }\n    else if (y_piece.current + 2 > getValues.height - 1) {\n        switch (piece_falling.current) {\n            case 2:\n                /* T piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                        break;\n\n                    case 1:\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                        break;\n\n                    case 3:\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                        break;\n                }\n                break;\n\n            case 3:\n                /* Square piece */\n                temp[y_piece.current][x_piece.current] = 1;\n                temp[y_piece.current][x_piece.current+1] = 1;\n                temp[y_piece.current+1][x_piece.current] = 1;\n                temp[y_piece.current+1][x_piece.current+1] = 1;\n\n                piece_falling.current = 0;\n                piece_orientation.current = 0;\n                x_piece.current = 3;\n                y_piece.current = 0;\n                break;\n\n            case 4:\n                /* L piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current+1][x_piece.current-1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                        break;\n\n                    case 1:\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n                        temp[y_piece.current-1][x_piece.current-1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                        break;\n                    \n                    case 3:\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current+1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                        break;\n                }\n                break;\n        }\n    }\n    else if (y_piece.current + 3 > getValues.height - 1) {\n        switch (piece_falling.current) {\n            case 1:\n                /* I piece */\n                switch (piece_orientation.current) {\n                    case 1:\n                    case 3:\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n                        temp[y_piece.current+2][x_piece.current] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                        break;\n                }\n                break;\n        }\n    }\n\n    /* Checks if the piece can go down one line */\n    switch (piece_falling.current) {\n        case 0:\n            break;\n\n        case 1:\n            /* I piece */\n            switch (piece_orientation.current) {\n                case 0:\n                case 2:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+1][x_piece.current-1] === 0 && \n                        temp[y_piece.current+1][x_piece.current] === 0 && \n                        temp[y_piece.current+1][x_piece.current+1] === 0 && \n                        temp[y_piece.current+1][x_piece.current+2] === 0) {\n\n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current][x_piece.current+2] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n\n                case 1:\n                case 3:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+3][x_piece.current] === 0) {\n\n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n                        temp[y_piece.current+2][x_piece.current] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n            }\n            break;\n\n        case 2:\n            /* T piece */\n            switch (piece_orientation.current) {\n                case 0:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+1][x_piece.current-1] === 0 && \n                        temp[y_piece.current+1][x_piece.current+1] === 0 && \n                        temp[y_piece.current+2][x_piece.current] === 0) {\n\n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n\n                case 1:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+2][x_piece.current] === 0 && \n                        temp[y_piece.current+1][x_piece.current-1] === 0) {\n                        \n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current-1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n\n                case 2:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+1][x_piece.current-1] === 0 && \n                        temp[y_piece.current+1][x_piece.current] === 0 && \n                        temp[y_piece.current+1][x_piece.current+1] === 0) {\n                        \n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current-1][x_piece.current] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n\n                case 3:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+2][x_piece.current] === 0 && \n                        temp[y_piece.current+1][x_piece.current+1] === 0) {\n                        \n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n            }\n            break;\n\n        case 3:\n            /* Square piece */\n            /* If there is space below the piece... */\n            if (temp[y_piece.current+2][x_piece.current] === 0 && \n                temp[y_piece.current+2][x_piece.current+1] === 0) {\n                \n                y_piece.current += 1;\n            }\n            /* If there is an obstruction below the piece... */\n            else {\n                temp[y_piece.current][x_piece.current] = 1;\n                temp[y_piece.current][x_piece.current+1] = 1;\n                temp[y_piece.current+1][x_piece.current] = 1;\n                temp[y_piece.current+1][x_piece.current+1] = 1;\n\n                piece_falling.current = 0;\n                piece_orientation.current = 0;\n                x_piece.current = 3;\n                y_piece.current = 0;\n            }\n            break;\n        \n        case 4:\n            /* L piece */\n            switch (piece_orientation.current) {\n                case 0:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+1][x_piece.current] === 0 && \n                        temp[y_piece.current+1][x_piece.current+1] === 0 && \n                        temp[y_piece.current+2][x_piece.current-1] === 0) {\n                        \n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current+1][x_piece.current-1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n\n                case 1:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+2][x_piece.current] === 0 && \n                        temp[y_piece.current][x_piece.current-1] === 0) {\n                        \n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n                        temp[y_piece.current-1][x_piece.current-1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n\n                case 2:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+1][x_piece.current-1] === 0 && \n                        temp[y_piece.current+1][x_piece.current] === 0 && \n                        temp[y_piece.current+1][x_piece.current+1] === 0) {\n                        \n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current][x_piece.current-1] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current+1] = 1;\n                        temp[y_piece.current-1][x_piece.current+1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n\n                case 3:\n                    /* If there is space below the piece... */\n                    if (temp[y_piece.current+2][x_piece.current] === 0 && \n                        temp[y_piece.current+2][x_piece.current+1] === 0) {\n                        \n                        y_piece.current += 1;\n                    }\n                    /* If there is an obstruction below the piece... */\n                    else {\n                        temp[y_piece.current-1][x_piece.current] = 1;\n                        temp[y_piece.current][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current] = 1;\n                        temp[y_piece.current+1][x_piece.current+1] = 1;\n\n                        piece_falling.current = 0;\n                        piece_orientation.current = 0;\n                        x_piece.current = 3;\n                        y_piece.current = 0;\n                    }\n                    break;\n            }\n            break;\n    }\n    return temp;\n}\n\nexport default CheckPiece;","function RemovePlayablePiece(getValues, temp) {\n\n    for (let i=0; i<getValues.height; i++) {\n        if (temp[i].includes(2)) {\n            for (let j=0; j<getValues.width; j++) {\n\n                if (temp[i][j] === 2) {\n                    temp[i][j] = 0;\n                }\n\n            }\n        }\n    }\n\n    return temp;\n}\n\nexport default RemovePlayablePiece;","function RemoveLine(getValues, grid_final, score) {\n    for (let i=0; i<getValues.height; i++) {\n        if ( !(grid_final.current[i].includes(0)) ) {\n            grid_final.current.splice(i, 1);\n            grid_final.current.splice(0, 0, JSON.parse(JSON.stringify( Array(8).fill(0) )) );\n            score.current += 10;\n        }\n    }\n}\n\nexport default RemoveLine;","import RenderPiece from './RenderPiece.js';\nimport CheckPiece from './CheckPiece.js';\nimport RemovePlayablePiece from './RemovePlayablePiece.js';\nimport RemoveLine from './RemoveLine.js';\n\nfunction UpdateGrid(getValues, started, grid_final, piece_falling, piece_orientation, piecesList, highscore, score, x_piece, y_piece, gameOver) {\n    /**\n    * Update the html grid to show\n    * the pieces and obstacles\n    */\n\n    /* Makes a temporary copy of the grid array */\n    let temp_grid = JSON.parse(JSON.stringify(grid_final.current));\n\n    /* Removes number 2 from the array */\n    temp_grid = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, JSON.parse(JSON.stringify(temp_grid)) )));\n\n    /* All the new obstacles and new empty zones are updated in the visible html grid */\n    grid_final.current = JSON.parse(JSON.stringify(CheckPiece(\n        getValues, temp_grid, started, piece_falling, piece_orientation, piecesList, highscore, score, x_piece, y_piece, gameOver\n        )));\n\n    RemoveLine(getValues, grid_final, score);\n\n    RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n}\n\nexport default UpdateGrid;","import './GameOverModalWindow.css';\n\nfunction GameOverModalWindow(props) {\n\n    const deactivateGameOver = () => {\n        props.gameOver.current = false;\n        props.reRender(true);\n    }\n\n    return (\n        <div className={props.gameOver.current ? 'blackOverlayGameOver' : 'blackOverlayGameOver gameOverInactive'}>\n            <div className=\"GameOverModalWindow\">\n                Game over<br/>\n                <button className='buttonMini mar' onClick={deactivateGameOver}>OK</button>\n            </div>\n        </div>\n    );\n}\n\nexport default GameOverModalWindow;","import RemovePlayablePiece from \"./RemovePlayablePiece.js\";\nimport RenderPiece from \"./RenderPiece\";\n\nfunction MoveRight(getValues, reRender, grid_final, piece_falling, piece_orientation, x_piece, y_piece, started) {\n\n    if (piece_falling.current !== 0 && x_piece.current < getValues.width - 1 && started.current) {\n\n        /* Makes a temporary copy of the grid array */\n        let temp = JSON.parse(JSON.stringify(grid_final.current));\n\n        switch (piece_falling.current) {\n            case 1:\n                /* I piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                    case 2:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current+3] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 1:\n                    case 3:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current+1] === 0 && \n                            temp[y_piece.current][x_piece.current+1] === 0 && \n                            temp[y_piece.current+1][x_piece.current+1] === 0 && \n                            temp[y_piece.current+2][x_piece.current+1] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n                }\n                break;\n\n            case 2:\n                /* T piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current+2] === 0 && \n                            temp[y_piece.current+1][x_piece.current+1] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 1:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current+1] === 0 && \n                            temp[y_piece.current][x_piece.current+1] === 0 && \n                            temp[y_piece.current+1][x_piece.current+1] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 2:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current+2] === 0 && \n                            temp[y_piece.current-1][x_piece.current+1] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 3:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current+1] === 0 && \n                            temp[y_piece.current][x_piece.current+2] === 0 && \n                            temp[y_piece.current+1][x_piece.current+1] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n                }\n                break;\n\n            case 3:\n                /* Square piece */\n                /* If the side is empty... */\n                if (temp[y_piece.current][x_piece.current+2] === 0 && \n                    temp[y_piece.current+1][x_piece.current+2] === 0) {\n\n                    x_piece.current += 1;\n                    grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                    RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                    reRender(true);\n                }\n                break;\n\n            case 4:\n                /* L piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current+2] === 0 && \n                            temp[y_piece.current+1][x_piece.current] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 1:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current+1] === 0 && \n                            temp[y_piece.current][x_piece.current+1] === 0 && \n                            temp[y_piece.current+1][x_piece.current+1] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 2:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current+2] === 0 && \n                            temp[y_piece.current-1][x_piece.current+2] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 3:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current+1] === 0 && \n                            temp[y_piece.current][x_piece.current+1] === 0 && \n                            temp[y_piece.current+1][x_piece.current+2] === 0) {\n\n                            x_piece.current += 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n                }\n                break;\n        }\n    }\n}\n\nexport default MoveRight;","import RemovePlayablePiece from \"./RemovePlayablePiece.js\";\nimport RenderPiece from \"./RenderPiece\";\n\nfunction MoveLeft(getValues, reRender, grid_final, piece_falling, piece_orientation, x_piece, y_piece, started) {\n\n    if (piece_falling.current !== 0 && x_piece.current > 0 && started.current) {\n\n        /* Makes a temporary copy of the grid array */\n        let temp = JSON.parse(JSON.stringify(grid_final.current));\n\n        switch (piece_falling.current) {\n            case 1:\n                /* I piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                    case 2:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current-2] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 1:\n                    case 3:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current-1] === 0 && \n                            temp[y_piece.current][x_piece.current-1] === 0 && \n                            temp[y_piece.current+1][x_piece.current-1] === 0 && \n                            temp[y_piece.current+2][x_piece.current-1] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n                }\n                break;\n\n            case 2:\n                /* T piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current-2] === 0 && \n                            temp[y_piece.current+1][x_piece.current-1] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 1:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current-1] === 0 && \n                            temp[y_piece.current][x_piece.current-2] === 0 && \n                            temp[y_piece.current+1][x_piece.current-1] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 2:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current-2] === 0 && \n                            temp[y_piece.current-1][x_piece.current-1] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 3:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current-1] === 0 && \n                            temp[y_piece.current][x_piece.current-1] === 0 && \n                            temp[y_piece.current+1][x_piece.current-1] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n                }\n                break;\n\n            case 3:\n                /* Square piece */\n                /* If the side is empty... */\n                if (temp[y_piece.current][x_piece.current-1] === 0 && \n                    temp[y_piece.current+1][x_piece.current-1] === 0) {\n\n                    x_piece.current -= 1;\n                    grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                    RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                    reRender(true);\n                }\n                break;\n\n            case 4:\n                /* L piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current-2] === 0 && \n                            temp[y_piece.current+1][x_piece.current-2] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 1:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current-2] === 0 && \n                            temp[y_piece.current][x_piece.current-1] === 0 && \n                            temp[y_piece.current+1][x_piece.current-1] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 2:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current][x_piece.current-2] === 0 && \n                            temp[y_piece.current-1][x_piece.current] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n\n                    case 3:\n                        /* If the side is empty... */\n                        if (temp[y_piece.current-1][x_piece.current-1] === 0 && \n                            temp[y_piece.current][x_piece.current-1] === 0 && \n                            temp[y_piece.current+1][x_piece.current-1] === 0) {\n\n                            x_piece.current -= 1;\n                            grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                            RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                            reRender(true);\n                        }\n                        break;\n                }\n                break;\n        }\n    }\n}\n\nexport default MoveLeft;","import RemovePlayablePiece from \"./RemovePlayablePiece.js\";\nimport RenderPiece from \"./RenderPiece\";\n\nfunction Rotate(getValues, reRender, piece_falling, piece_orientation, grid_final, x_piece, y_piece, started) {\n\n    if (piece_falling.current !== 0 && started.current) {\n\n        /* Makes a temporary copy of the grid array */\n        let temp = JSON.parse(JSON.stringify(grid_final.current));\n\n        switch (piece_falling.current) {\n            case 1:\n                /* I piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                    case 2:\n                        /* Rotate to 1 - 3 if there is space... */\n                        if (y_piece.current-1 >= 0 && y_piece.current+2 <= getValues.height - 1) {\n\n                            if (temp[y_piece.current-1][x_piece.current] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current+1][x_piece.current] !== 1 &&\n                                temp[y_piece.current+2][x_piece.current] !== 1) {\n\n                                piece_orientation.current = 1;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n\n                    case 1:\n                    case 3:\n                        /* Rotate to 0 - 2 if there is space... */\n                        if (x_piece.current-1 >= 0 && x_piece.current+2 <= getValues.width - 1) {\n\n                            if (temp[y_piece.current][x_piece.current-1] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current][x_piece.current+1] !== 1 &&\n                                temp[y_piece.current][x_piece.current+2] !== 1) {\n\n                                piece_orientation.current = 0;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n                }\n                break;\n\n            case 2:\n                /* T piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                        /* Rotate to 1 if there is space... */\n                        if (y_piece.current-1 >= 0) {\n\n                            if (temp[y_piece.current][x_piece.current-1] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current-1][x_piece.current] !== 1 &&\n                                temp[y_piece.current+1][x_piece.current] !== 1) {\n\n                                piece_orientation.current = 1;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n\n                    case 1:\n                        /* Rotate to 2 if there is space... */\n                        if (x_piece.current+1 <= getValues.width - 1) {\n\n                            if (temp[y_piece.current][x_piece.current-1] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current][x_piece.current+1] !== 1 &&\n                                temp[y_piece.current-1][x_piece.current] !== 1) {\n\n                                piece_orientation.current = 2;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n\n                    case 2:\n                        /* Rotate to 3 if there is space... */\n                        if (y_piece.current+1 <= getValues.height - 1) {\n\n                            if (temp[y_piece.current][x_piece.current+1] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current-1][x_piece.current] !== 1 &&\n                                temp[y_piece.current+1][x_piece.current] !== 1) {\n\n                                piece_orientation.current = 3;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n\n                    case 3:\n                        /* Rotate to 0 if there is space... */\n                        if (x_piece.current-1 >= 0) {\n\n                            if (temp[y_piece.current][x_piece.current-1] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current][x_piece.current+1] !== 1 &&\n                                temp[y_piece.current+1][x_piece.current] !== 1) {\n\n                                piece_orientation.current = 0;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n                }\n                break;\n\n            case 3:\n                /* Square piece */\n                break;\n\n            case 4:\n                /* L piece */\n                switch (piece_orientation.current) {\n                    case 0:\n                        /* Rotate to 1 if there is space... */\n                        if (y_piece.current-1 >= 0) {\n\n                            if (temp[y_piece.current-1][x_piece.current] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current+1][x_piece.current] !== 1 &&\n                                temp[y_piece.current-1][x_piece.current-1] !== 1) {\n\n                                piece_orientation.current = 1;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n\n                    case 1:\n                        /* Rotate to 2 if there is space... */\n                        if (x_piece.current+1 <= getValues.width - 1) {\n\n                            if (temp[y_piece.current][x_piece.current-1] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current][x_piece.current+1] !== 1 &&\n                                temp[y_piece.current-1][x_piece.current+1] !== 1) {\n\n                                piece_orientation.current = 2;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n\n                    case 2:\n                        /* Rotate to 3 if there is space... */\n                        if (y_piece.current+1 <= getValues.height - 1) {\n\n                            if (temp[y_piece.current-1][x_piece.current] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current+1][x_piece.current] !== 1 &&\n                                temp[y_piece.current+1][x_piece.current+1] !== 1) {\n\n                                piece_orientation.current = 3;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n\n                    case 3:\n                        /* Rotate to 0 if there is space... */\n                        if (x_piece.current-1 >= 0) {\n\n                            if (temp[y_piece.current][x_piece.current-1] !== 1 &&\n                                temp[y_piece.current][x_piece.current] !== 1 &&\n                                temp[y_piece.current][x_piece.current+1] !== 1 &&\n                                temp[y_piece.current+1][x_piece.current-1] !== 1) {\n\n                                piece_orientation.current = 0;\n\n                                grid_final.current = JSON.parse(JSON.stringify(RemovePlayablePiece(getValues, temp)));\n                                RenderPiece(piece_falling, piece_orientation, grid_final, x_piece, y_piece);\n                                reRender(true);\n                            }\n                        }\n                        break;\n                }\n                break;\n        }\n    }\n}\n\nexport default Rotate;","import { useCallback, useEffect, useRef } from 'react';\nimport './Minigame.css';\nimport Values from './Values.js';\nimport CreatePiecesList from './CreatePiecesList.js';\nimport UpdateGrid from './UpdateGrid.js';\nimport GameOverModalWindow from './GameOverModalWindow.js';\nimport MoveRight from './MoveRight.js';\nimport MoveLeft from './MoveLeft.js';\nimport Rotate from './Rotate.js';\n\nfunction Minigame() {\n\n    /* Grid: A matrix with 16 rows and 8 columns filled with zeroes. */\n    const grid_final = useRef( JSON.parse(JSON.stringify(Array(16).fill( Array(8).fill(0) ))) );\n    const started = useRef(false);\n    const piecesList = useRef([Math.floor(Math.random() * 4) + 1]);\n    const highscore = useRef(0);\n    const score = useRef(0);\n    const piece_falling = useRef(0); /* Piece falling (0 means no piece) */\n    const piece_orientation = useRef(0);\n    const x_piece = useRef(3); /* X (Width index) coordinate of piece */\n    const y_piece = useRef(0); /* Y (Height index) coordinate of piece */\n    const gameOver = useRef(false); /* Activate or deactivate game over screen */\n    const timers = useRef([]); /* Array with timers id */\n\n    /*\n     * 0: No piece in tile.\n     * 1: Normal piece in tile.\n     * 2: Playable piece.\n    */\n\n    /* Use setter method to force to re-render. */\n    const [getValues, reRender] = Values(16,   /* Height (num of rows) */\n                                        8,     /* Width (num of columns) */\n                                        0.5,   /* Dificulty (Seconds to update grid) */\n                                        true); /* Render */\n\n    const StartNPause = () => {\n        if (started.current) {\n            started.current = false;\n        }\n        else {\n            started.current = true;\n            GameLoop();\n        }\n    }\n\n    const GameLoop = () => {\n        /** \n         * Keep a loop updating the next-pieces list\n         * and rendering new frames of the game\n         */\n\n        if (started.current) {\n            if (piecesList.current.length < 1) {\n                CreatePiecesList(piecesList);\n            }\n\n            UpdateGrid(\n                getValues, started, grid_final, piece_falling, piece_orientation, piecesList, highscore, score, x_piece, y_piece, gameOver\n                );\n\n            reRender(true);\n            timers.current.push( setTimeout(GameLoop, getValues.dificulty * 1000) );\n        }\n    }\n\n    const KeyboardListener = useCallback((e) => {\n        switch (e.key) {\n            case 'ArrowLeft':\n                MoveLeft(getValues, reRender, grid_final, piece_falling, piece_orientation, x_piece, y_piece, started);\n                break;\n\n            case 'ArrowRight':\n                MoveRight(getValues, reRender, grid_final, piece_falling, piece_orientation, x_piece, y_piece, started);\n                break;\n\n            case 'ArrowUp':\n                Rotate(getValues, reRender, piece_falling, piece_orientation, grid_final, x_piece, y_piece, started);\n                break;\n            \n            default:\n                return null;\n        }\n    }, [getValues, reRender]);\n\n    /* Listen keyboard when subpage is loaded and stop listening when unloaded. */\n    useEffect(() => {\n        document.addEventListener('keydown', KeyboardListener);\n        return () => {\n            document.removeEventListener(\"keydown\", KeyboardListener);\n            if (!started.current) {\n                for (let id of timers.current) {\n                    clearTimeout(id);\n                }\n                timers.current = [];\n            }\n        }\n    },[KeyboardListener]);\n\n    return (\n        <div>\n            <br/>\n            <br/>\n            <br/>\n            <GameOverModalWindow gameOver={gameOver} reRender={reRender}/>\n            <h1 className=\"titleSubpage\">Minigame</h1>\n            <button className='buttonMini mar' onClick={StartNPause}>Start &amp; pause</button>\n\n            <div className='Minigame'>\n                {grid_final.current.map(\n                    (y_grid, i) => (y_grid.map(\n                        (x_grid, j) => (<div key={'minigame-tile-'+i+'-'+j} className={grid_final.current[i][j]!==0 ? 'tileMini pieceTile' : 'tileMini'}></div>)\n                    ))\n                )}\n            </div>\n\n            <p className='scoreMini'><b>Highscore:</b> {highscore.current} | <b>Score:</b> {score.current}</p>\n            <br/>\n\n            <br/><br/><br/><br/><br/>\n        </div>\n    );\n}\n\nexport default Minigame;","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["h","w","d","r","useState","height","width","dificulty","render","getValues","setValues","re","piecesList","result","rand_piece","Math","floor","random","rand","last_piece","push","length","current","piece_falling","piece_orientation","grid_final","x_piece","y_piece","started","score","highscore","temp","gameOver","piece","pop","Restart","Array","fill","i","includes","j","splice","JSON","parse","stringify","temp_grid","RemovePlayablePiece","CheckPiece","RemoveLine","RenderPiece","props","className","onClick","reRender","useRef","timers","Values","GameLoop","CreatePiecesList","UpdateGrid","setTimeout","KeyboardListener","useCallback","e","key","MoveLeft","MoveRight","Rotate","useEffect","document","addEventListener","removeEventListener","o","allowArrayLike","it","Symbol","iterator","isArray","unsupportedIterableToArray","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","id","clearTimeout","map","y_grid","x_grid"],"sourceRoot":""}